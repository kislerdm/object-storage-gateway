openapi: "3.0.0"
info:
  title: "Minio Gateway"
  version: "0.0.6"
  contact:
    email: admin@dkisler.com
  license:
    name: "MIT"
    url: "https://opensource.org/license/mit/"
paths:
  /object/{id}:
    parameters:
      - in: "path"
        name: "id"
        description: Object ID.
        required: true
        schema:
          $ref: "#/components/schemas/ID"
    put:
      tags:
        - Write
      summary: Store an object. Note that existing object will be overwritten.
      requestBody:
        description: Object to store
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Object created.
        '400':
          description: The request is missing the body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Provided Object ID is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - Read
      summary: Read an object.
      responses:
        '200':
          description: OK.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Object not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Provided Object ID is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    ID:
      type: "string"
      pattern: "^[a-zA-Z0-9]{1,32}$"
    Error:
      type: object
      required:
        - "error"
      additionalProperties: false
      properties:
        error:
          description: "Error message"
          type: "string"
